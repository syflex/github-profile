/*
  Colors
*/
/* Stony Green */
/*
  Accordion FAQs Colors
*/
/*
  Font Stacks
*/
/*
  Body
*/
/*
  Navigation
*/
/*
  Breakpoints
*/
nav .header .dropdown:hover > ul, nav .header {
  margin: 0;
  padding: 0;
  list-style: none;
}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block;
}

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 2.5em;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/* Forms
   ========================================================================== */
/**
 * 1. Change font properties to `inherit` in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 0.0625em dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 0.0625em solid #c0c0c0;
  margin: 0 0.125em;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -0.125em;
  /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type=search]::-webkit-search-cancel-button,
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

* {
  box-sizing: border-box;
}

body {
  position: relative;
  line-height: 1.5;
  font-family: "Roboto", Helvetica, Arial, sans-serif;
  background: #34495e;
  color: #7f8c8d;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Roboto", Helvetica, Arial, sans-serif;
  font-weight: 600;
  text-transform: uppercase;
  margin: 0.3125em 0;
  text-align: center;
  line-height: 1.3;
  color: #7f8c8d;
  text-decoration: none;
}
h1 a,
h2 a,
h3 a,
h4 a,
h5 a,
h6 a {
  text-decoration: none;
  color: inherit;
}
@media screen and (min-width: 47.5em) {
  h1,
h2,
h3,
h4,
h5,
h6 {
    text-align: left;
  }
}

.container {
  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 78.75em;
  margin: 0 auto;
  padding: 0.3125em;
  box-sizing: border-box;
}
@media screen and (min-width: 61.8125em) {
  .container {
    padding: 1.875em;
  }
}

.img-r {
  display: block;
  max-width: 100%;
  min-width: 0;
}

img {
  border-radius: 0.3125em;
}

.btn {
  display: block;
  padding: 0.625em 0.9375em;
  margin: 1.25em 0;
  font-weight: 600;
  text-decoration: none;
  text-transform: uppercase;
  text-align: center;
}
.btn-inline {
  display: inline-block;
}
.btn-flat {
  display: flex;
  background: transparent;
  border: transparent;
  cursor: pointer;
  margin: unset;
}
.btn-flat :focus {
  border: transparent;
}
.btn-base {
  background: #e84393;
  border: 0.0625em solid #dd1b79;
  border-radius: 1.875em;
  color: #fff;
  text-transform: capitalize;
  cursor: pointer;
}
.btn-base:hover {
  background: #dd1b79;
  transition: all 0.3s ease;
  color: #fff;
}
.btn-base:active {
  background: #991354;
}
.btn-alternate {
  background: #6c5ce7;
  border: 0.0625em solid #4430e0;
  border-radius: 1.875em;
  color: #fff;
  text-transform: capitalize;
  cursor: pointer;
}
.btn-alternate:hover {
  background: #4430e0;
  transition: all 0.3s ease;
  color: #fff;
}
.btn-alternate:active {
  background: #2a19aa;
}
.btn-tertiary {
  background: #2ecc71;
  border: 0.0625em solid #25a25a;
  border-radius: 1.875em;
  color: #fff;
  text-transform: capitalize;
  cursor: pointer;
}
.btn-tertiary:hover {
  background: #25a25a;
  transition: all 0.3s ease;
  color: #fff;
}
.btn-tertiary:active {
  background: #176437;
}
.btn-outline {
  background: #fff;
  border: 0.0625em solid #e6e6e6;
  border-radius: 1.875em;
  color: #000;
  text-transform: capitalize;
  cursor: pointer;
  margin: 0em 0;
  padding: 0.625em 0.3125em;
}
.btn-outline:hover {
  background: #e6e6e6;
  transition: all 0.3s ease;
  color: #000;
}
.btn-outline:active {
  background: #bfbfbf;
}

nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 2;
}
nav .header {
  display: none;
  flex-direction: row;
  align-items: center;
  margin: -1.25em 0;
  padding: 0;
}
@media screen and (min-width: 61.8125em) {
  nav .header {
    display: flex;
  }
}
nav .header ul {
  display: flex;
}
nav .header img {
  width: 45px;
}
nav .header li {
  height: 100%;
  list-style-type: none;
}
nav .header li a {
  position: relative;
  display: flex;
  color: #fff;
  text-decoration: none;
  padding: 0.625em;
  align-items: center;
  border: 2px solid transparent;
  transition: border 1s, color 1s;
  height: 100%;
}
nav .header li a:hover {
  border-bottom-color: #e84393;
  color: #e84393;
}
nav .header li a > span {
  position: absolute;
  top: 0.875em;
  right: 0;
  font-size: 0.625em;
  font-weight: bold;
  color: #fff;
  border-radius: 0.75em;
  padding: 0.0625em 0.5em;
}
nav .header li a > span.base {
  background: #e84393;
}
nav .header li a > span.tertiary {
  background: #2ecc71;
}
nav .header .dropdown a span {
  top: unset;
  right: unset;
  bottom: 15px;
  left: 20px;
}
nav .header .dropdown ul {
  display: none;
  position: absolute;
  top: 80px;
}
nav .header .dropdown:hover > ul {
  display: flex;
  flex-direction: column;
  background: #fff;
  border-radius: 5px;
  padding: 10px;
}
nav .header .dropdown:hover > ul li a {
  color: #111111;
  border: none;
  padding: 0.3125em 1.875em;
}
nav .header .dropdown:hover > ul li a:hover {
  color: #7f8c8d;
}

body {
  margin: 0;
}

.header, .header-item {
  display: flex;
  align-items: center;
  flex-wrap: nowrap;
}

.header {
  padding: 16px;
  padding-right: 16px;
  padding-left: 16px;
  font-size: 14px;
  line-height: 1.5;
  color: #fff;
  background-color: #24292e;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/